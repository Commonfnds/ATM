# This workflow will build a Java project with Maven
name: Java CI with Maven for ATM

# Controls when the action will run. Triggers the workflow on push or pull request events but only for master branch 
on:
  push:
    branches: [ Master ]

# A workflow is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  build:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of taks that will be executed as part of the job
    steps:
    - name: Step 1 - checkout main branch from github
      uses: actions/checkout@v2
      
    - name: Step 2 - set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
  
    - name: Step 3 - Code Inspector Check code quality standards
      id: code-inspector
      uses: codeinspectorio/github-action@v1
      with:
		    # Token to checkout the repository.
        repo_token: ${{ secrets.GITHUB_TOKEN }}
		
		    # Access key on Code Inspector
        code_inspector_access_key: ${{ secrets.CODE_INSPECTOR_ACCESS_KEY }}
		
		    # Secret key on Code Inspector
        code_inspector_secret_key: ${{ secrets.CODE_INSPECTOR_SECRET_KEY }}
		
		    # Minimum grade. Valid options are EXCELLENT, GOOD, NEUTRAL, WARNING, CRITICAL. Leave blank to ignore.
        min_quality_grade: 'GOOD'
		
		    # Minimum quality score from 0 (worst) to 100 (best)
        min_quality_score: '90'
		
		    # Maximum defect rate per line of code (e.g. 0.01 for 1 defect per 100 lines of code). Leave 0 to ignore.
        max_defects_rate: '0.0001'
		
		    # Maximum number of complex functions rate (e.g. number of complex functions / number of functions). Leave 0 to ignore.
        max_complex_functions_rate: '0.0001'
		
		    # Maximum number of long functions rate (e.g. number of long functions / number of functions). Leave 0 to ignore.
        max_long_functions_rate: '0.0001'
		
		    # Project on code inspector. Will use the preferences of this analysis. Leave blank and no preferences are used
        project_name: ''
		
		    # Timeout before giving up (in case analysis takes too long). Default is 10 minutes
        max_timeout_sec: '600'
        
    - name: Step 4 - build with Maven
      run: |
        mvn -B package --file pom.xml
        mkdir staging && cp target/*.jar staging
      
    - name: Step 5 - setup a cache for Maven
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
      
    - name: Step 6 - list the current directory
      run: ls -a

    - name: Step 7 - what is in the target directory
      run: |
        cd target
        ls -a
  
    - name: Step 8 - Persist workflow data as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: github-actions-artifact 
        path: staging
      
